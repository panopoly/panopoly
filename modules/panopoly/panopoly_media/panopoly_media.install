<?php

/**
 * @file
 * Install hooks for Panopoly Media.
 */

use Drupal\file\Entity\File;
use Drupal\embed\Entity\EmbedButton;
use Drupal\Core\Config\ExtensionInstallStorage;
use Drupal\Core\Config\InstallStorage;
use Drupal\Core\Utility\UpdateException;
use Drupal\panopoly_media\Update\ContentModelUpdater;
use Drupal\system\Entity\Action;

define('PANOPOLY_MEDIA_ICON_UUID', 'a55d8d13-8e8f-406f-ba43-d3765f450325');
define('PANOPOLY_MEDIA_EMBED_BUTTON', 'panopoly_media_wysiwyg_media_embed');

/**
 * Implements hook_install().
 */
function panopoly_media_install() {
  // If we're able to create the icon, but the button doesn't exist, create it.
  if (_panopoly_media_create_embed_icon() && !EmbedButton::load(PANOPOLY_MEDIA_EMBED_BUTTON)) {
    $entity_type_manager = \Drupal::entityTypeManager();
    /** @var \Drupal\Core\Config\StorageInterface $active_config_storage */
    $active_config_storage = \Drupal::getContainer()->get('config.storage');
    $extension_config_storage = new ExtensionInstallStorage($active_config_storage, InstallStorage::CONFIG_OPTIONAL_DIRECTORY, '', true, \Drupal::installProfile());

    $config_data = $extension_config_storage->read('embed.button.' . PANOPOLY_MEDIA_EMBED_BUTTON);
    /** @var \Drupal\Core\Config\Entity\ConfigEntityStorageInterface $entity_storage */
    $entity_storage = $entity_type_manager->getStorage('embed_button');
    $entity = $entity_storage->createFromStorageRecord($config_data);
    $entity->save();
  }

  _panopoly_media_set_delete_config();
}

/**
 * Create media embed icon.
 *
 * @return \Drupal\Core\Entity\EntityInterface|null
 *   The file entity for the icon, or NULL if there was a problem creating the
 *   icon.
 */
function _panopoly_media_create_embed_icon() {
  /** @var \Drupal\Core\Entity\EntityRepositoryInterface $entity_repository */
  $entity_repository = \Drupal::service('entity.repository');
  $file = $entity_repository->loadEntityByUuid('file', PANOPOLY_MEDIA_ICON_UUID);
  if ($file) {
    return $file;
  }

  $source = __DIR__ . '/images/drupalimage.png';
  $destination = 'public://panopoly_media_icon.png';
  if ($uri = \Drupal::service('file_system')->copy($source, $destination)) {
    $file = File::create([
      'uid' => 1,
      'filename' => basename($uri),
      'uri' => $uri,
      'status' => 1,
      'uuid' => PANOPOLY_MEDIA_ICON_UUID,
    ]);
    $file->save();
    return $file;
  }

  return NULL;
}

/**
 * Adds the configuration entity for the file delete action.
 */
function _panopoly_media_set_delete_config() {
  if ($action = Action::load('panopoly_media_file_delete_action')) {
    return;
  }

  $action = Action::create([
    'langcode' => 'en',
    'status' => TRUE,
    'dependencies' => [
      'module' => [
        'file',
        'panopoly_media',
      ],
    ],
    'id' => 'panopoly_media_file_delete_action',
    'label' => 'Delete file',
    'type' => 'file',
    'plugin' => 'panopoly_media_file_delete_action',
    "configuration" => [],
  ]);
  $action->save();
}

/**
 * Set WYSIWYG embed button icon.
 */
function panopoly_media_update_8201() {
  if (!_panopoly_media_create_embed_icon()) {
    throw new UpdateException("Unable to create media embed icon");
  }

  if ($embed_button = EmbedButton::load(PANOPOLY_MEDIA_EMBED_BUTTON)) {
    $embed_button->set('icon_uuid', PANOPOLY_MEDIA_ICON_UUID);
    $embed_button->save();
  }
  else {
    throw new UpdateException("Unable to load media embed button");
  }
}

/**
 * Enable Inline Entity Form dependency.
 */
function panopoly_media_update_8202() {
  \Drupal::service('module_installer')->install(['inline_entity_form']);
}

/**
 * Add file delete action configuration.
 */
function panopoly_media_update_8203() {
  _panopoly_media_set_delete_config();
}

/**
 * Switch embed display modes to use responsive image styles.
 */
function panopoly_media_update_8204() {
  $options = [
    'media.image.embed_large' => [
      'type' => 'image',
      'settings' => [
        'image_style' => '',
      ],
    ],
    'media.image.embed_medium' => [
      'type' => 'responsive_image',
      'settings' => [
        'responsive_image_style' => 'panopoly_images_quarter',
      ],
    ],
    'media.image.embed_small' => [
      'type' => 'responsive_image',
      'settings' => [
        'responsive_image_style' => 'panopoly_images_thumbnail',
      ],
    ],
  ];

  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface[] $displays */
  $displays = Drupal::entityTypeManager()->getStorage('entity_view_display')->loadMultiple(array_keys($options));
  foreach ($displays as $display) {
    $display->setComponent('field_media_image', $options[$display->id()])
      ->save();
  }
}

/**
 * Media content model conversion.
 */
function panopoly_media_update_8205(&$context) {
  $updater = new ContentModelUpdater();

  // Set state first time through.
  if (empty($context['sandbox']['state'])) {
    $context['sandbox']['state'] = 'init';
  }

  $context['#finished'] = 0;

  // Update data.
  switch ($context['sandbox']['state']) {
    case 'init':
      $context['message'] = 'Updating config';
      $updater->init();
      $context['sandbox']['state'] = 'convert_fields';
      break;

    case 'convert_fields':
      $context['message'] = 'Converting media reference fields';
      $updater->convertFields();
      $context['sandbox']['state'] = 'convert_entities';
      break;

    case 'convert_entities':
      $context['message'] = 'Converting media entities';
      $context['#finished'] = $updater->convertMedia($context);
      // Clean up when done.
      if ($context['#finished'] == 1) {
        $updater->cleanup();
      }
      break;
  }
}
